use std::collections::{HashMap, VecDeque, HashSet};

use protocol::LargeField;
use types::Replica;

pub struct RandSharings{
    // First, add a map of sharings w.r.t. batch size and sender party
    // First map index is the sender party and the second map index is the batch number
    pub shares: HashMap<usize, HashMap<usize, Vec<LargeField>>>,
    // Also store the list of all parties whose ACSS completed
    pub acss_completed_parties: HashSet<usize>,
    // Second, add a map of 2t sharings of zero with the same indices
    pub sh2t_shares: HashMap<usize, HashMap<usize, Vec<LargeField>>>,
    // Store list of all parties who completed sh2t sharings
    pub sh2t_completed_parties: HashSet<usize>,
    // Third, store the ACS output values
    pub acs_output: Vec<Replica>,
    // Fourth, store the random sharings generated by parties and the ACS set
    pub rand_sharings_mult: VecDeque<LargeField>,
    pub rand_2t_sharings_mult: VecDeque<LargeField>,

    // Fifth, set aside random sharings for coin tossing
    pub rand_sharings_coin: VecDeque<LargeField>
}

impl RandSharings{
    pub fn new() -> Self{
        Self{
            shares: HashMap::default(),
            acss_completed_parties: HashSet::default(),
            sh2t_shares: HashMap::default(),
            sh2t_completed_parties: HashSet::default(),
            acs_output: Vec::new(),
            rand_sharings_mult: VecDeque::new(),
            rand_2t_sharings_mult: VecDeque::new(),
            rand_sharings_coin: VecDeque::new()
        }
    }
}